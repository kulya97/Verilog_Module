/* Verilog netlist generated by SCUBA Diamond (64-bit) 3.11.0.396.4 */
/* Module Version: 2.8 */
/* C:\lscc\diamond\3.11_x64\ispfpga\bin\nt64\scuba.exe -w -n ROM -lang verilog -synth lse -bus_exp 7 -bb -arch xo3c00f -type rom -addr_width 10 -num_rows 768 -data_width 8 -outdata REGISTERED -memfile c:/users/gaurav/documents/fpga/lattice/counter/rom.mem -memformat orca  */
/* Tue Jan 14 20:17:42 2020 */


`timescale 1 ns / 1 ps
module ROM (Address, OutClock, OutClockEn, Reset, Q)/* synthesis NGD_DRC_MASK=1 */;
    input wire [9:0] Address;
    input wire OutClock;
    input wire OutClockEn;
    input wire Reset;
    output reg [7:0] Q;

    wire mdL0_0_2;
    wire mdL0_0_1;
    wire mdL0_0_0;
    wire mdL0_1_2;
    wire mdL0_1_1;
    wire mdL0_1_0;
    wire mdL0_2_2;
    wire mdL0_2_1;
    wire mdL0_2_0;
    wire mdL0_3_2;
    wire mdL0_3_1;
    wire mdL0_3_0;
    wire mdL0_4_2;
    wire mdL0_4_1;
    wire mdL0_4_0;
    wire mdL0_5_2;
    wire mdL0_5_1;
    wire mdL0_5_0;
    wire mdL0_6_2;
    wire mdL0_6_1;
    wire mdL0_6_0;
    wire scuba_vlo;
    wire mdL0_7_2;
    wire mdL0_7_1;
    wire mdL0_7_0;
    reg qdataout7_ffin_1;
    reg qdataout6_ffin_1;
    reg qdataout5_ffin_1;
    reg qdataout4_ffin_1;
    reg qdataout3_ffin_1;
    reg qdataout2_ffin_1;
    reg qdataout1_ffin_1;
    reg qdataout0_ffin_1;


//FD1P3DX replacement

    always @(posedge OutClock or posedge Reset) begin
    if (Reset) begin
      // Asynchronous reset: Clear the output when reset is active
      Q[7] <= 1'b0; 
      Q[6] <= 1'b0; 
      Q[5] <= 1'b0; 
      Q[4] <= 1'b0; 
      Q[3] <= 1'b0; 
      Q[2] <= 1'b0; 
      Q[1] <= 1'b0; 
      Q[0] <= 1'b0; 
      
    end else if (OutClockEn) begin
      // Clock enable condition
      // Update the output on the positive edge of the clock if clk_enable is active
      Q[7] <= qdataout7_ffin_1;
      Q[6] <= qdataout6_ffin_1;
      Q[5] <= qdataout5_ffin_1;
      Q[4] <= qdataout4_ffin_1;
      Q[3] <= qdataout3_ffin_1;
      Q[2] <= qdataout2_ffin_1;
      Q[1] <= qdataout1_ffin_1;
      Q[0] <= qdataout0_ffin_1;
    end else begin
      Q[7] <= Q[7];
      Q[6] <= Q[6];
      Q[5] <= Q[5];
      Q[4] <= Q[4];
      Q[3] <= Q[3];
      Q[2] <= Q[2];
      Q[1] <= Q[1];
      Q[0] <= Q[0];

    end
    end


    defparam mem_0_7.initval = 256'hFFFFFFF8A228E28E28840000000020080A82A0828000002A2402090080402000;
    memory256X1 mem_0_7 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_0_0));

    defparam mem_0_6.initval = 256'hFFFFFFF88220E20E208000011000000008822080800000220010000400000000 ;
    memory256X1 mem_0_6 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_1_0));

    defparam mem_0_5.initval = 256'hFFFFFFFCE338F38F38D400008AA0A0A84613A46A0000013A541A050281422000 ;
    memory256X1 mem_0_5 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_2_0));

    defparam mem_0_4.initval = 256'hFFFFFFFC6018718618040001DCCC62084E9180C2800000181C3E170780C0E000 ;
    memory256X1 mem_0_4 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_3_0));

    defparam mem_0_3.initval = 256'hFFFFFFFE61987987981400008A02A0284619844A20000198642A010285402000 ;
    memory256X1 mem_0_3 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_4_0));

    defparam mem_0_2.initval = 256'hFFFFFFFC0300F00F00D8400154E642B0E0300E2C00000100987426150C864201 ;
    memory256X1 mem_0_2 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_5_0));

    defparam mem_0_1.initval = 256'hFFFFFFFA0280E80E80800002A8820000B1280B0120000080D038140A04000000 ;
    memory256X1 mem_0_1 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_6_0));

    defparam mem_0_0.initval = 256'hFFFFFFFBC4F16F16F1484001566EC2902C0F42E4000000F4087422150D86C201 ;
    memory256X1 mem_0_0 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_7_0));

    defparam mem_1_7.initval = 256'hAAAB55555555555555555555552AAAAAAAAAAAAAAD5555555FFFFFFFFFFFFFFF ;
    memory256X1 mem_1_7 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_0_1));

    defparam mem_1_6.initval = 256'hFFFF55555555555555555555552AAAAAABFFFFFFF8000000000000007FFFFFFF ;
    memory256X1 mem_1_6 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_1_1));

    defparam mem_1_5.initval = 256'hFFFF55555557FFFFFFF55555552AAAAAAAAAAAAAA8000000155555552AAAAAAB ;
    memory256X1 mem_1_5 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_2_1));

    defparam mem_1_4.initval = 256'h000155555555555555555555555555555555555552AAAAAABFFFFFFFFFFFFFFF ;
    memory256X1 mem_1_4 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_3_1));

    defparam mem_1_3.initval = 256'h0001FFFFFFFD5555555555555555555555FFFFFFF8000000000000007FFFFFFF ;
    memory256X1 mem_1_3 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_4_1));

    defparam mem_1_2.initval = 256'hFFFEAAAAAAA80000000000000000000000000000055555555FFFFFFFD5555555 ;
    memory256X1 mem_1_2 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_5_1));

    defparam mem_1_1.initval = 256'hFFFE00000005555555400000002AAAAAABFFFFFFF80000000AAAAAAAFFFFFFFF ;
    memory256X1 mem_1_1 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_6_1));

    defparam mem_1_0.initval = 256'h555400000005555555400000002AAAAAAAAAAAAAA8000000155555552AAAAAAB ;
    memory256X1 mem_1_0 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_7_1));

    defparam mem_2_7.initval = 256'h0000000000000005555555400000000000000000000002AAAAAABFFFFFFFAAAA ;
    memory256X1 mem_2_7 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_0_2));

    defparam mem_2_6.initval = 256'h0000000000000002AAAAAAA00000005555555400000007FFFFFFEAAAAAAAFFFF ;
    memory256X1 mem_2_6 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_1_2));

    defparam mem_2_5.initval = 256'h00000000000000055555554AAAAAAAD555555400000007FFFFFFEAAAAAAAFFFF ;
    memory256X1 mem_2_5 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_2_2));

    defparam mem_2_4.initval = 256'h0000000000000002AAAAAAAAAAAAAAAAAAAAAAAAAAAAA8000000155555550000 ;
    memory256X1 mem_2_4 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_3_2));

    defparam mem_2_3.initval = 256'h00000000000000000000000AAAAAAAAAAAAAAAAAAAAAA8000000155555550000 ;
    memory256X1 mem_2_3 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_4_2));

    defparam mem_2_2.initval = 256'h0000000000000002AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFFFF ;
    memory256X1 mem_2_2 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_5_2));

    defparam mem_2_1.initval = 256'h00000000000000055555555FFFFFFFAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFFFF ;
    memory256X1 mem_2_1 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_6_2));

    defparam mem_2_0.initval = 256'h00000000000000000000001FFFFFFFAAAAAAAAAAAAAAAD555555555555555555 ;
    memory256X1 mem_2_0 (.addr({Address[7],Address[6],Address[5],Address[4],Address[3],Address[2],Address[1],Address[0]}), .data_out(mdL0_7_2));


//MUX41 replacement
    always @* begin
        case (Address[9:8])
          2'b00:  begin
          qdataout7_ffin_1 = mdL0_0_0;
          qdataout6_ffin_1 = mdL0_1_0;
          qdataout5_ffin_1 = mdL0_2_0;
          qdataout4_ffin_1 = mdL0_3_0;
          qdataout3_ffin_1 = mdL0_4_0;
          qdataout2_ffin_1 = mdL0_5_0;
          qdataout1_ffin_1 = mdL0_6_0;
          qdataout0_ffin_1 = mdL0_7_0;
          end
          2'b01:   begin
          qdataout7_ffin_1 = mdL0_0_1;
          qdataout6_ffin_1 = mdL0_1_1;
          qdataout5_ffin_1 = mdL0_2_1;
          qdataout4_ffin_1 = mdL0_3_1;
          qdataout3_ffin_1 = mdL0_4_1;
          qdataout2_ffin_1 = mdL0_5_1;
          qdataout1_ffin_1 = mdL0_6_1;
          qdataout0_ffin_1 = mdL0_7_1;
          end
          2'b10:   begin
          qdataout7_ffin_1 = mdL0_0_2;
          qdataout6_ffin_1 = mdL0_1_2;
          qdataout5_ffin_1 = mdL0_2_2;
          qdataout4_ffin_1 = mdL0_3_2;
          qdataout3_ffin_1 = mdL0_4_2;
          qdataout2_ffin_1 = mdL0_5_2;
          qdataout1_ffin_1 = mdL0_6_2;
          qdataout0_ffin_1 = mdL0_7_2;
          end
          2'b11:   begin
          qdataout7_ffin_1 = 1'b0;
          qdataout6_ffin_1 = 1'b0;
          qdataout5_ffin_1 = 1'b0;
          qdataout4_ffin_1 = 1'b0;
          qdataout3_ffin_1 = 1'b0;
          qdataout2_ffin_1 = 1'b0;
          qdataout1_ffin_1 = 1'b0;
          qdataout0_ffin_1 = 1'b0;
          end
         default:  begin
          qdataout7_ffin_1 = 1'b0;
          qdataout6_ffin_1 = 1'b0;
          qdataout5_ffin_1 = 1'b0;
          qdataout4_ffin_1 = 1'b0;
          qdataout3_ffin_1 = 1'b0;
          qdataout2_ffin_1 = 1'b0;
          qdataout1_ffin_1 = 1'b0;
          qdataout0_ffin_1 = 1'b0;
          end // Default case for invalid select values
        endcase
  end 
endmodule


//ROM256x1 replacement
module memory256X1 # (initval = 256'h0)
    (input wire [7:0] addr,
    output reg  data_out);

  reg [255:0] mem = initval; // Example initialization
    

  always @* begin
        data_out = mem[addr];
  end

endmodule

